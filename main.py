import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    Message, CallbackQuery
)
from liqpay import LiqPay
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
import os
import uvicorn
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –∫–ª—é—á–∏ –∏–∑ .env —Ñ–∞–π–ª–∞
TOKEN = os.getenv("TOKEN")
LIQPAY_PUBLIC_KEY = os.getenv("LIQPAY_PUBLIC_KEY")
LIQPAY_PRIVATE_KEY = os.getenv("LIQPAY_PRIVATE_KEY")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu = ReplyKeyboardMarkup(
    keyboard=[  
        [KeyboardButton(text="üìà –ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç"), KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
        [KeyboardButton(text="–ú–æ–π –∑–∞–∫–∞–∑")]
    ],
    resize_keyboard=True
)

# –£—Å–ª—É–≥–∏ –±—É—Å—Ç–∞
boost_menu = InlineKeyboardMarkup(
    inline_keyboard=[  
        [InlineKeyboardButton(text="–†–∞–Ω–≥–∏ MLBB", callback_data="boost_rank")],
        [InlineKeyboardButton(text="MMR Mobile Legends", callback_data="boost_mmr")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_main")]
    ]
)

# –ú–µ–Ω—é —Ä–∞–Ω–≥–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
rank_prices = {
    "rank_warrior": 50,
    "rank_elite": 100,
    "rank_master": 150,
    "rank_grandmaster": 200,
    "rank_epic": 300,
    "rank_legend": 400,
    "rank_mythic": 500
}

rank_menu = InlineKeyboardMarkup(
    inline_keyboard=[  
        [InlineKeyboardButton(text=f"–í–æ–∏–Ω (50 –≥—Ä–Ω)", callback_data="rank_warrior"),
         InlineKeyboardButton(text=f"–≠–ª–∏—Ç–Ω—ã–π (100 –≥—Ä–Ω)", callback_data="rank_elite")],
        [InlineKeyboardButton(text=f"–ú–∞—Å—Ç–µ—Ä (150 –≥—Ä–Ω)", callback_data="rank_master"),
         InlineKeyboardButton(text=f"–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä (200 –≥—Ä–Ω)", callback_data="rank_grandmaster")],
        [InlineKeyboardButton(text=f"–≠–ø–∏–∫ (300 –≥—Ä–Ω)", callback_data="rank_epic"),
         InlineKeyboardButton(text=f"–õ–µ–≥–µ–Ω–¥–∞ (400 –≥—Ä–Ω)", callback_data="rank_legend")],
        [InlineKeyboardButton(text=f"–ú–∏—Ñ–∏–∫ (500 –≥—Ä–Ω)", callback_data="rank_mythic")],
        [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back_boost")]
    ]
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def start(message: Message):
    try:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –ø–æ –ø–æ–∫—É–ø–∫–µ –±—É—Å—Ç–∞!\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
            reply_markup=main_menu
        )
    except Exception as e:
        logger.error(f"Error while handling /start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")

# –û—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(lambda msg: msg.text == "üìà –ó–∞–∫–∞–∑–∞—Ç—å –±—É—Å—Ç")
async def order_boost(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=boost_menu)

@dp.message(lambda msg: msg.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def help_info(message: Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @ZeRunart_1")

@dp.message(lambda msg: msg.text == "–ú–æ–π –∑–∞–∫–∞–∑")
async def user_order_status(message: Message):
    await message.answer("–í–∞—à —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –º–µ–Ω—é!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —É—Å–ª—É–≥
@dp.callback_query(lambda c: c.data in ["boost_rank", "boost_mmr", "back_main"])
async def process_boost_menu(callback_query: CallbackQuery):
    if callback_query.data == "boost_rank":
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–Ω–≥ –¥–ª—è –±—É—Å—Ç–∞:", reply_markup=rank_menu)
    elif callback_query.data == "boost_mmr":
        await callback_query.message.edit_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –±—É—Å—Ç MMR –≤ Mobile Legends. –£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π MMR –∏ –∂–µ–ª–∞–µ–º—ã–π MMR.",
        )
    elif callback_query.data == "back_main":
        await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ —Ä–∞–Ω–≥–æ–≤
@dp.callback_query(lambda c: c.data.startswith("rank_"))
async def process_rank_selection(callback_query: CallbackQuery):
    rank_key = callback_query.data
    price = rank_prices.get(rank_key, 0)
    rank_name = {
        "rank_warrior": "–í–æ–∏–Ω",
        "rank_elite": "–≠–ª–∏—Ç–Ω—ã–π",
        "rank_master": "–ú–∞—Å—Ç–µ—Ä",
        "rank_grandmaster": "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä",
        "rank_epic": "–≠–ø–∏–∫",
        "rank_legend": "–õ–µ–≥–µ–Ω–¥–∞",
        "rank_mythic": "–ú–∏—Ñ–∏–∫"
    }.get(rank_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–Ω–≥")

    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–Ω–≥: {rank_name}. –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} –≥—Ä–Ω. \n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_{rank_key}"),
            InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="boost_rank")
        )
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith("confirm_"))
async def confirm_rank(callback_query: CallbackQuery):
    rank_key = callback_query.data.replace("confirm_", "")
    price = rank_prices.get(rank_key, 0)
    rank_name = {
        "rank_warrior": "–í–æ–∏–Ω",
        "rank_elite": "–≠–ª–∏—Ç–Ω—ã–π",
        "rank_master": "–ú–∞—Å—Ç–µ—Ä",
        "rank_grandmaster": "–ì—Ä–∞–Ω–¥–º–∞—Å—Ç–µ—Ä",
        "rank_epic": "–≠–ø–∏–∫",
        "rank_legend": "–õ–µ–≥–µ–Ω–¥–∞",
        "rank_mythic": "–ú–∏—Ñ–∏–∫"
    }.get(rank_key, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–Ω–≥")

    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ LiqPay
    liqpay = LiqPay(LIQPAY_PUBLIC_KEY, LIQPAY_PRIVATE_KEY)
    params = {
        "action": "pay",
        "amount": str(price),
        "currency": "UAH",
        "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞ –±—É—Å—Ç {rank_name}",
        "order_id": f"order_{rank_key}_{callback_query.from_user.id}",
        "version": "3",
        "result_url": "https://your-bot-url.com/payment-success",
        "server_url": "https://your-bot-url.com/payment-callback"
    }
    link = liqpay.cnb_link(params)

    await callback_query.message.edit_text(
        f"–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –≤—ã–±–æ—Ä —Ä–∞–Ω–≥–∞: {rank_name}. \n–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: {link}.",
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç LiqPay
@app.post("/payment-callback")
async def payment_callback(request: Request):
    data = await request.json()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç LiqPay: {data}")
    return JSONResponse(content={"status": "ok"})

@app.get("/payment-success")
async def payment_success():
    return JSONResponse(content={"message": "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"})

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ FastAPI –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ FastAPI
    asyncio.run(main())
)
